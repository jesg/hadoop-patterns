/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package jesg.avro;  
@SuppressWarnings("all")
/** Custom pair that sorts both the with two values first and second */
@org.apache.avro.specific.AvroGenerated
public class Pair extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Pair\",\"namespace\":\"jesg.avro\",\"doc\":\"Custom pair that sorts both the with two values first and second\",\"fields\":[{\"name\":\"first\",\"type\":\"string\"},{\"name\":\"special\",\"type\":\"boolean\",\"default\":\"false\",\"order\":\"descending\"},{\"name\":\"second\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.CharSequence first;
   private boolean special;
   private java.lang.CharSequence second;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public Pair() {}

  /**
   * All-args constructor.
   */
  public Pair(java.lang.CharSequence first, java.lang.Boolean special, java.lang.CharSequence second) {
    this.first = first;
    this.special = special;
    this.second = second;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return first;
    case 1: return special;
    case 2: return second;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: first = (java.lang.CharSequence)value$; break;
    case 1: special = (java.lang.Boolean)value$; break;
    case 2: second = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'first' field.
   */
  public java.lang.CharSequence getFirst() {
    return first;
  }

  /**
   * Sets the value of the 'first' field.
   * @param value the value to set.
   */
  public void setFirst(java.lang.CharSequence value) {
    this.first = value;
  }

  /**
   * Gets the value of the 'special' field.
   */
  public java.lang.Boolean getSpecial() {
    return special;
  }

  /**
   * Sets the value of the 'special' field.
   * @param value the value to set.
   */
  public void setSpecial(java.lang.Boolean value) {
    this.special = value;
  }

  /**
   * Gets the value of the 'second' field.
   */
  public java.lang.CharSequence getSecond() {
    return second;
  }

  /**
   * Sets the value of the 'second' field.
   * @param value the value to set.
   */
  public void setSecond(java.lang.CharSequence value) {
    this.second = value;
  }

  /** Creates a new Pair RecordBuilder */
  public static jesg.avro.Pair.Builder newBuilder() {
    return new jesg.avro.Pair.Builder();
  }
  
  /** Creates a new Pair RecordBuilder by copying an existing Builder */
  public static jesg.avro.Pair.Builder newBuilder(jesg.avro.Pair.Builder other) {
    return new jesg.avro.Pair.Builder(other);
  }
  
  /** Creates a new Pair RecordBuilder by copying an existing Pair instance */
  public static jesg.avro.Pair.Builder newBuilder(jesg.avro.Pair other) {
    return new jesg.avro.Pair.Builder(other);
  }
  
  /**
   * RecordBuilder for Pair instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Pair>
    implements org.apache.avro.data.RecordBuilder<Pair> {

    private java.lang.CharSequence first;
    private boolean special;
    private java.lang.CharSequence second;

    /** Creates a new Builder */
    private Builder() {
      super(jesg.avro.Pair.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(jesg.avro.Pair.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.first)) {
        this.first = data().deepCopy(fields()[0].schema(), other.first);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.special)) {
        this.special = data().deepCopy(fields()[1].schema(), other.special);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.second)) {
        this.second = data().deepCopy(fields()[2].schema(), other.second);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Pair instance */
    private Builder(jesg.avro.Pair other) {
            super(jesg.avro.Pair.SCHEMA$);
      if (isValidValue(fields()[0], other.first)) {
        this.first = data().deepCopy(fields()[0].schema(), other.first);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.special)) {
        this.special = data().deepCopy(fields()[1].schema(), other.special);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.second)) {
        this.second = data().deepCopy(fields()[2].schema(), other.second);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'first' field */
    public java.lang.CharSequence getFirst() {
      return first;
    }
    
    /** Sets the value of the 'first' field */
    public jesg.avro.Pair.Builder setFirst(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.first = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'first' field has been set */
    public boolean hasFirst() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'first' field */
    public jesg.avro.Pair.Builder clearFirst() {
      first = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'special' field */
    public java.lang.Boolean getSpecial() {
      return special;
    }
    
    /** Sets the value of the 'special' field */
    public jesg.avro.Pair.Builder setSpecial(boolean value) {
      validate(fields()[1], value);
      this.special = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'special' field has been set */
    public boolean hasSpecial() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'special' field */
    public jesg.avro.Pair.Builder clearSpecial() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'second' field */
    public java.lang.CharSequence getSecond() {
      return second;
    }
    
    /** Sets the value of the 'second' field */
    public jesg.avro.Pair.Builder setSecond(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.second = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'second' field has been set */
    public boolean hasSecond() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'second' field */
    public jesg.avro.Pair.Builder clearSecond() {
      second = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Pair build() {
      try {
        Pair record = new Pair();
        record.first = fieldSetFlags()[0] ? this.first : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.special = fieldSetFlags()[1] ? this.special : (java.lang.Boolean) defaultValue(fields()[1]);
        record.second = fieldSetFlags()[2] ? this.second : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
