/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package jesg.avro;  
@SuppressWarnings("all")
/** Represents a node in a graph. */
@org.apache.avro.specific.AvroGenerated
public class Node extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Node\",\"namespace\":\"jesg.avro\",\"doc\":\"Represents a node in a graph.\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"distance\",\"type\":\"int\",\"ordering\":\"ignore\"},{\"name\":\"adjacencyList\",\"type\":[{\"type\":\"array\",\"items\":\"int\"},\"null\"],\"ordering\":\"ignore\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private int id;
   private int distance;
   private java.util.List<java.lang.Integer> adjacencyList;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public Node() {}

  /**
   * All-args constructor.
   */
  public Node(java.lang.Integer id, java.lang.Integer distance, java.util.List<java.lang.Integer> adjacencyList) {
    this.id = id;
    this.distance = distance;
    this.adjacencyList = adjacencyList;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return distance;
    case 2: return adjacencyList;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: distance = (java.lang.Integer)value$; break;
    case 2: adjacencyList = (java.util.List<java.lang.Integer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'distance' field.
   */
  public java.lang.Integer getDistance() {
    return distance;
  }

  /**
   * Sets the value of the 'distance' field.
   * @param value the value to set.
   */
  public void setDistance(java.lang.Integer value) {
    this.distance = value;
  }

  /**
   * Gets the value of the 'adjacencyList' field.
   */
  public java.util.List<java.lang.Integer> getAdjacencyList() {
    return adjacencyList;
  }

  /**
   * Sets the value of the 'adjacencyList' field.
   * @param value the value to set.
   */
  public void setAdjacencyList(java.util.List<java.lang.Integer> value) {
    this.adjacencyList = value;
  }

  /** Creates a new Node RecordBuilder */
  public static jesg.avro.Node.Builder newBuilder() {
    return new jesg.avro.Node.Builder();
  }
  
  /** Creates a new Node RecordBuilder by copying an existing Builder */
  public static jesg.avro.Node.Builder newBuilder(jesg.avro.Node.Builder other) {
    return new jesg.avro.Node.Builder(other);
  }
  
  /** Creates a new Node RecordBuilder by copying an existing Node instance */
  public static jesg.avro.Node.Builder newBuilder(jesg.avro.Node other) {
    return new jesg.avro.Node.Builder(other);
  }
  
  /**
   * RecordBuilder for Node instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Node>
    implements org.apache.avro.data.RecordBuilder<Node> {

    private int id;
    private int distance;
    private java.util.List<java.lang.Integer> adjacencyList;

    /** Creates a new Builder */
    private Builder() {
      super(jesg.avro.Node.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(jesg.avro.Node.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.distance)) {
        this.distance = data().deepCopy(fields()[1].schema(), other.distance);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.adjacencyList)) {
        this.adjacencyList = data().deepCopy(fields()[2].schema(), other.adjacencyList);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Node instance */
    private Builder(jesg.avro.Node other) {
            super(jesg.avro.Node.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.distance)) {
        this.distance = data().deepCopy(fields()[1].schema(), other.distance);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.adjacencyList)) {
        this.adjacencyList = data().deepCopy(fields()[2].schema(), other.adjacencyList);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Integer getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public jesg.avro.Node.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public jesg.avro.Node.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'distance' field */
    public java.lang.Integer getDistance() {
      return distance;
    }
    
    /** Sets the value of the 'distance' field */
    public jesg.avro.Node.Builder setDistance(int value) {
      validate(fields()[1], value);
      this.distance = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'distance' field has been set */
    public boolean hasDistance() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'distance' field */
    public jesg.avro.Node.Builder clearDistance() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'adjacencyList' field */
    public java.util.List<java.lang.Integer> getAdjacencyList() {
      return adjacencyList;
    }
    
    /** Sets the value of the 'adjacencyList' field */
    public jesg.avro.Node.Builder setAdjacencyList(java.util.List<java.lang.Integer> value) {
      validate(fields()[2], value);
      this.adjacencyList = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'adjacencyList' field has been set */
    public boolean hasAdjacencyList() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'adjacencyList' field */
    public jesg.avro.Node.Builder clearAdjacencyList() {
      adjacencyList = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Node build() {
      try {
        Node record = new Node();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.distance = fieldSetFlags()[1] ? this.distance : (java.lang.Integer) defaultValue(fields()[1]);
        record.adjacencyList = fieldSetFlags()[2] ? this.adjacencyList : (java.util.List<java.lang.Integer>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
