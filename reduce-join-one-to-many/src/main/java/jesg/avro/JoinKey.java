/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package jesg.avro;  
@SuppressWarnings("all")
/** Key that joins two datasets. */
@org.apache.avro.specific.AvroGenerated
public class JoinKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"JoinKey\",\"namespace\":\"jesg.avro\",\"doc\":\"Key that joins two datasets.\",\"fields\":[{\"name\":\"joinKey\",\"type\":\"long\"},{\"name\":\"type\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private long joinKey;
   private int type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public JoinKey() {}

  /**
   * All-args constructor.
   */
  public JoinKey(java.lang.Long joinKey, java.lang.Integer type) {
    this.joinKey = joinKey;
    this.type = type;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return joinKey;
    case 1: return type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: joinKey = (java.lang.Long)value$; break;
    case 1: type = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'joinKey' field.
   */
  public java.lang.Long getJoinKey() {
    return joinKey;
  }

  /**
   * Sets the value of the 'joinKey' field.
   * @param value the value to set.
   */
  public void setJoinKey(java.lang.Long value) {
    this.joinKey = value;
  }

  /**
   * Gets the value of the 'type' field.
   */
  public java.lang.Integer getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.Integer value) {
    this.type = value;
  }

  /** Creates a new JoinKey RecordBuilder */
  public static jesg.avro.JoinKey.Builder newBuilder() {
    return new jesg.avro.JoinKey.Builder();
  }
  
  /** Creates a new JoinKey RecordBuilder by copying an existing Builder */
  public static jesg.avro.JoinKey.Builder newBuilder(jesg.avro.JoinKey.Builder other) {
    return new jesg.avro.JoinKey.Builder(other);
  }
  
  /** Creates a new JoinKey RecordBuilder by copying an existing JoinKey instance */
  public static jesg.avro.JoinKey.Builder newBuilder(jesg.avro.JoinKey other) {
    return new jesg.avro.JoinKey.Builder(other);
  }
  
  /**
   * RecordBuilder for JoinKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<JoinKey>
    implements org.apache.avro.data.RecordBuilder<JoinKey> {

    private long joinKey;
    private int type;

    /** Creates a new Builder */
    private Builder() {
      super(jesg.avro.JoinKey.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(jesg.avro.JoinKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.joinKey)) {
        this.joinKey = data().deepCopy(fields()[0].schema(), other.joinKey);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing JoinKey instance */
    private Builder(jesg.avro.JoinKey other) {
            super(jesg.avro.JoinKey.SCHEMA$);
      if (isValidValue(fields()[0], other.joinKey)) {
        this.joinKey = data().deepCopy(fields()[0].schema(), other.joinKey);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'joinKey' field */
    public java.lang.Long getJoinKey() {
      return joinKey;
    }
    
    /** Sets the value of the 'joinKey' field */
    public jesg.avro.JoinKey.Builder setJoinKey(long value) {
      validate(fields()[0], value);
      this.joinKey = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'joinKey' field has been set */
    public boolean hasJoinKey() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'joinKey' field */
    public jesg.avro.JoinKey.Builder clearJoinKey() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public java.lang.Integer getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public jesg.avro.JoinKey.Builder setType(int value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'type' field */
    public jesg.avro.JoinKey.Builder clearType() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public JoinKey build() {
      try {
        JoinKey record = new JoinKey();
        record.joinKey = fieldSetFlags()[0] ? this.joinKey : (java.lang.Long) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
