/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package jesg.avro;  
@SuppressWarnings("all")
/** Key that sorts first by term then by docId */
@org.apache.avro.specific.AvroGenerated
public class TermDocPair extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TermDocPair\",\"namespace\":\"jesg.avro\",\"doc\":\"Key that sorts first by term then by docId\",\"fields\":[{\"name\":\"term\",\"type\":\"string\"},{\"name\":\"docId\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.CharSequence term;
   private int docId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public TermDocPair() {}

  /**
   * All-args constructor.
   */
  public TermDocPair(java.lang.CharSequence term, java.lang.Integer docId) {
    this.term = term;
    this.docId = docId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return term;
    case 1: return docId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: term = (java.lang.CharSequence)value$; break;
    case 1: docId = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'term' field.
   */
  public java.lang.CharSequence getTerm() {
    return term;
  }

  /**
   * Sets the value of the 'term' field.
   * @param value the value to set.
   */
  public void setTerm(java.lang.CharSequence value) {
    this.term = value;
  }

  /**
   * Gets the value of the 'docId' field.
   */
  public java.lang.Integer getDocId() {
    return docId;
  }

  /**
   * Sets the value of the 'docId' field.
   * @param value the value to set.
   */
  public void setDocId(java.lang.Integer value) {
    this.docId = value;
  }

  /** Creates a new TermDocPair RecordBuilder */
  public static jesg.avro.TermDocPair.Builder newBuilder() {
    return new jesg.avro.TermDocPair.Builder();
  }
  
  /** Creates a new TermDocPair RecordBuilder by copying an existing Builder */
  public static jesg.avro.TermDocPair.Builder newBuilder(jesg.avro.TermDocPair.Builder other) {
    return new jesg.avro.TermDocPair.Builder(other);
  }
  
  /** Creates a new TermDocPair RecordBuilder by copying an existing TermDocPair instance */
  public static jesg.avro.TermDocPair.Builder newBuilder(jesg.avro.TermDocPair other) {
    return new jesg.avro.TermDocPair.Builder(other);
  }
  
  /**
   * RecordBuilder for TermDocPair instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TermDocPair>
    implements org.apache.avro.data.RecordBuilder<TermDocPair> {

    private java.lang.CharSequence term;
    private int docId;

    /** Creates a new Builder */
    private Builder() {
      super(jesg.avro.TermDocPair.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(jesg.avro.TermDocPair.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.term)) {
        this.term = data().deepCopy(fields()[0].schema(), other.term);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.docId)) {
        this.docId = data().deepCopy(fields()[1].schema(), other.docId);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TermDocPair instance */
    private Builder(jesg.avro.TermDocPair other) {
            super(jesg.avro.TermDocPair.SCHEMA$);
      if (isValidValue(fields()[0], other.term)) {
        this.term = data().deepCopy(fields()[0].schema(), other.term);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.docId)) {
        this.docId = data().deepCopy(fields()[1].schema(), other.docId);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'term' field */
    public java.lang.CharSequence getTerm() {
      return term;
    }
    
    /** Sets the value of the 'term' field */
    public jesg.avro.TermDocPair.Builder setTerm(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.term = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'term' field has been set */
    public boolean hasTerm() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'term' field */
    public jesg.avro.TermDocPair.Builder clearTerm() {
      term = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'docId' field */
    public java.lang.Integer getDocId() {
      return docId;
    }
    
    /** Sets the value of the 'docId' field */
    public jesg.avro.TermDocPair.Builder setDocId(int value) {
      validate(fields()[1], value);
      this.docId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'docId' field has been set */
    public boolean hasDocId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'docId' field */
    public jesg.avro.TermDocPair.Builder clearDocId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public TermDocPair build() {
      try {
        TermDocPair record = new TermDocPair();
        record.term = fieldSetFlags()[0] ? this.term : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.docId = fieldSetFlags()[1] ? this.docId : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
